# Generated by Django 2.1.1 on 2018-10-09 07:26
from django.contrib.auth.models import AbstractUser, BaseUserManager
from django.db import migrations
from os import listdir
from os.path import isfile, join
import random

CATEGORIES_DATA = [
    {'name': 'Категория 1'},
    {'name': 'Категория 2'},
    {'name': 'Категория 3'},
]


def create_default_categories(apps, schema_editor):
    Category = apps.get_model('productsapp', 'ProductCategory')

    for data in CATEGORIES_DATA:
        Category.objects.get_or_create(**data)


def create_default_photos(apps, schema_editor):
    Photo = apps.get_model('productsapp', 'Photo')

    imgpath = 'static/images/goods/'
    photofiles = [f for f in listdir(imgpath) if isfile(join(imgpath, f)) and f != 'noimage.jpg']

    p, created = Photo.objects.get_or_create(src='static/images/goods/noimage.jpg')

    for photo in sorted(photofiles):
        Photo.objects.get_or_create(src=join(imgpath, photo))


def create_default_products(apps, schema_editor):
    product = apps.get_model('productsapp', 'Good')
    Category = apps.get_model('productsapp', 'ProductCategory')
    Photo = apps.get_model('productsapp', 'Photo')
    user = apps.get_model('authapp', 'ShopUser')

    u, created = user.objects.get_or_create(username='test', email='', password='123456', age=33)

    imgpath = 'static/images/goods/'
    photofiles = [f for f in listdir(imgpath) if isfile(join(imgpath, f)) and f != 'noimage.jpg']

    for k in range(1, 1000):
        c, created = Category.objects.get_or_create(pk=random.randint(1, 3))

        p, created = Photo.objects.get_or_create(pk=random.randint(1, len(photofiles)))

        prod, created = \
            product.objects.get_or_create(author=u,
                                          category=c,
                                          # photos=p,
                                          name='Товар' + str(k),
                                          price=111 * k,
                                          short_desc='BEST FOR: Getting into waves and maintaining speed; without sacrificing the ability to hit the lip. This board really flows off the tail. FIN: Future boxes or glass on wooden fins, by Gully, are standard on the Quadkumber.',
                                          description='''Lorem ipsum dolor sit amet, consectetur adipisicing elit. Minima pariatur provident quod repellendus. Commodi 
                                                   deleniti deserunt doloribus, eius, ex exercitationem hic iste iure iusto, laudantium officia quam qui tempore veritatis 
                                                   voluptatum! Aspernatur cumque esse iste nam quaerat quo soluta. Alias hic, ipsum iste laboriosam molestias quidem rem voluptate. 
                                                   Architecto aspernatur deleniti, deserunt dignissimos distinctio doloremque doloribus eius exercitationem illo incidunt labore 
                                                   necessitatibus nemo nobis non odit officiis omnis pariatur porro, reiciendis temporibus tenetur totam, voluptate. 
                                                   A consequatur corporis earum enim fugit hic quia similique vel vitae. A accusamus architecto cum dicta error ex, harum minima, 
                                                   optio quaerat repellendus similique vel.'''
                                          )
        if created:
            prod.photos.add(p)


def create_super_user(apps, schema_editor):
    from authapp.models import ShopUser
    super_user = ShopUser.objects.create_superuser('a.sandal', '', '0233', age=45)


class Migration(migrations.Migration):
    dependencies = [
        ('productsapp', '0001_initial'),
    ]

    operations = [
        migrations.RunPython(
            create_default_categories,
            lambda x, y: (x, y)
        ),
        migrations.RunPython(
            create_default_photos,
            lambda x, y: (x, y)
        ),
        migrations.RunPython(
            create_default_products,
            lambda x, y: (x, y)
        ),
        migrations.RunPython(
            create_super_user,
            lambda x, y: (x, y)
        )
    ]
